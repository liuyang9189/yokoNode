{
  "name": "exdate",
  "version": "0.0.4",
  "description": "the best date tool for javascript/node",
  "main": "./lib/exdate.js",
  "bin": {
    "xdate": "lib/exdate.js"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/caolvchong/exdate.git"
  },
  "keywords": [
    "date",
    "util",
    "javascript",
    "node"
  ],
  "author": {
    "name": "caolvchong",
    "email": "caolvchong@gmail.com",
    "url": "http://firejs.blogspot.com/"
  },
  "license": "BSD",
  "dependencies": {},
  "engines": {
    "node": "*"
  },
  "devDependencies": {},
  "optionalDependencies": {},
  "homepage": "https://github.com/caolvchong/exdate",
  "readme": "#便捷的javascript date 处理工具\n\n##目的\njavascript 日期对象格式化，字符串转日期对象，日期格式检查，日期比较以及日期间隔的工具\n\n##安装\n1. 安装node，参见：https://github.com/joyent/node\n\n2. 安装npm，参见：https://github.com/isaacs/npm\n\n3. 安装exdate\n\n     $ npm install exdate\n\n##日期格式说明\nField        | Full Form          | Short Form\n-------------|:------------------:|-----------------------:\nYear         | yyyy (4 digits)    | yy (2 digits), y (2 or 4 digits)\nMonth        | MMM (name or abbr.)| MM (2 digits), M (1 or 2 digits)| NNN (abbr)\nDay of Month | dd (2 digits)      | d (1 or 2 digits)\nDay of Week  | EE (name)          | E (abbr)\nHour (1-12)  | hh (2 digits)      | h (1 or 2 digits)\nHour (0-23)  | HH (2 digits)      | H (1 or 2 digits)\nHour (0-11)  | KK (2 digits)      | K (1 or 2 digits)\nHour (1-24)  | kk (2 digits)      | k (1 or 2 digits)\nMinute       | mm (2 digits)      | m (1 or 2 digits)\nSecond       | ss (2 digits)      | s (1 or 2 digits)\nAM/PM        | a                  |\n\n##API\n### 引入\n    * var exdate = require('exdate');\n\n### exdate.isLeap(year) 判断是否是闰年\n    * @param {Integer} year\n    * @return {Boolean} true 是闰年 false 不是闰年\n\n### exdate.check(val, pattern) 检测是否是一个符合格式的日期字符串\n    * @param {String} val 日期字符串\n    * @param {String} pattern 日期格式, 可省略, 默认值 yyyy-MM-dd\n    * @return {Boolean} true 是符合格式的日期字符串 false 不是\n\n### exdate.compare(date1, date2) 比较两个日期的前后顺序\n    * @param {Date} date1 起始日期\n    * @param {Date} date2 结束日期\n    * @return {Integer} -1 起始日期 > 结束日期; 0 起始日期 = 结束日期; 1 起始日期 < 结束日期\n\n### exdate.stringCompare(string1, pattern1, string2, pattern2) 比较两个日期字符串的前后顺序\n    * @param {String} string1 起始日期字符串\n    * @param {String} pattern1 起始日期格式\n    * @param {String} string2 结束日期字符串\n    * @param {String} pattern2 结束日期格式\n    * @return {Integer} -1 起始日期 > 结束日期; 0 起始日期 = 结束日期; 1 起始日期 < 结束日期\n\n### exdate.stringToDate(val, pattern) 字符串转化为日期对象\n    * @param {String} val 日期字符串\n    * @param {String} pattern 对应的日期格式, 可省略, 默认值 yyyy-MM-dd\n    * @return {Date} 日期对象,如果不能正确解析该字符串,返回0\n\n### exdate.format(date, pattern) 格式化日期,将日期对象按照需要的格式输出\n    * @param {Date} date 需要格式化输出的日期对象\n    * @param {String} pattern 格式化字符串, 可省略, 默认值 yyyy-MM-dd\n    * @return {String} 格式化后的字符串\n\n### exdate.distance(date, n, unit) 距离给定的date的n个时间的日期\n    * @param {Date} date 基准日期\n    * @param {Integer} n n个时间\n    * @param {String} unit 时间单位,默认天，具体单位分别是：y年，q季度，M月，h时，m分，s秒，w周，其他都是天\n    * @return {Date} 日期对象\n\n### exdate.xformat(date, i18n) 和当前时间比较, 返回更亲和的格式\n    * 1小时之内: 显示 x秒前/x分钟前\n    * 今天之内: 显示 今天 x时x分\n    * 今年之内: 显示 x月x日 x时x分\n    * 今年之前: 显示 x年x月x日 x时x分\n    * @param date 需要格式化的日期对象\n    * @param i18n 国际化，默认中文格式\n    * @return {String} 格式化好的可读的日期字符串\n    \n详细的使用参看sample中的例子",
  "_id": "exdate@0.0.4",
  "_from": "exdate"
}
